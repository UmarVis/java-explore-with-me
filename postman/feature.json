{
  "info": {
    "_postman_id": "c133664c-26ff-4701-857d-60bc46d45f50",
    "name": "Tests comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "27307887"
  },
  "item": [
    {
      "name": "Добавление нового комментария для не опубликованного события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
              "    pm.response.to.have.status(409);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"eventId\": 2,\n    \"text\": \"Test comment\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/user/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "user",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление нового комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(201);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Пользователь должен содержать поля: id, created, updated, text, event_id, user_id\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('created');",
              "pm.expect(target).to.have.property('updated');",
              "pm.expect(target).to.have.property('text');",
              "pm.expect(target).to.have.property('eventId');",
              "pm.expect(target).to.have.property('userId');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать отправленному в запросе');",
              "    pm.expect(source.eventId).equal(target.eventId, 'Евент ИД должен соответствовать отправленному в запросе');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"eventId\": 1,\n    \"text\": \"Test comment\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/user/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "user",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление второго комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
              "    pm.response.to.have.status(201);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Пользователь должен содержать поля: id, created, updated, text, event_id, user_id\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('created');",
              "pm.expect(target).to.have.property('updated');",
              "pm.expect(target).to.have.property('text');",
              "pm.expect(target).to.have.property('eventId');",
              "pm.expect(target).to.have.property('userId');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать отправленному в запросе');",
              "    pm.expect(source.eventId).equal(target.eventId, 'Евент ИД должен соответствовать отправленному в запросе');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"eventId\": 1,\n    \"text\": \"Test comment 2\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/user/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "user",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменени комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.have.status(200);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = JSON.parse(pm.request.body.raw);",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Пользователь должен содержать поля: id, created, updated, text, event_id, user_id\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('created');",
              "pm.expect(target).to.have.property('updated');",
              "pm.expect(target).to.have.property('text');",
              "pm.expect(target).to.have.property('eventId');",
              "pm.expect(target).to.have.property('userId');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать отправленному в запросе');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"text\": \"Update comment\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/1/user/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "1",
            "user",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получения комментария по ИД комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.be.ok;    ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Комментарий должен содержать поля: id, created, updated, text, event_id, user_id\", function () {",
              "pm.expect(target).to.have.property('id');",
              "pm.expect(target).to.have.property('created');",
              "pm.expect(target).to.have.property('updated');",
              "pm.expect(target).to.have.property('text');",
              "pm.expect(target).to.have.property('eventId');",
              "pm.expect(target).to.have.property('userId');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target['text']).equal('Update comment');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/comments/admin/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "admin",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получения комментария по несуществующему комментарию",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
              "    pm.response.to.have.status(404);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/comments/admin/199",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "admin",
            "199"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получения комментария несуществующим пользователем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
              "    pm.response.to.have.status(404);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/comments/admin/user/199",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "admin",
            "user",
            "199"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получения комментария для несуществующего события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
              "    pm.response.to.have.status(404);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/comments/admin/events/199",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "admin",
            "events",
            "199"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получения комментария пользователем по ИД",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.be.ok;    ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = pm.collectionVariables.get('response');",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Комментарий должен содержать поля: id, created, updated, text, event_id, user_id\", function () {",
              "pm.expect(target[0]).to.have.property('id');",
              "pm.expect(target[0]).to.have.property('created');",
              "pm.expect(target[0]).to.have.property('updated');",
              "pm.expect(target[0]).to.have.property('text');",
              "pm.expect(target[0]).to.have.property('eventId');",
              "pm.expect(target[0]).to.have.property('userId');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/comments/admin/user/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "admin",
            "user",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получения комментария по ИД события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
              "    pm.response.to.be.ok;    ",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const source = pm.collectionVariables.get('response');",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Комментарий должен содержать поля: id, created, updated, text, event_id, user_id\", function () {",
              "pm.expect(target[0]).to.have.property('id');",
              "pm.expect(target[0]).to.have.property('created');",
              "pm.expect(target[0]).to.have.property('updated');",
              "pm.expect(target[0]).to.have.property('text');",
              "pm.expect(target[0]).to.have.property('eventId');",
              "pm.expect(target[0]).to.have.property('userId');",
              "});",
              "",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
              "    pm.expect(target.id).to.not.be.null;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/comments/events/1?from=0&size=10",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "events",
            "1"
          ],
          "query": [
            {
              "key": "from",
              "value": "0"
            },
            {
              "key": "size",
              "value": "10"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменени комментария комментария с некорректным телом",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
              "    pm.response.to.have.status(400);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"event_id\": 1,\n    \"text\": \"\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/1/user/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "1",
            "user",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменени несуществующего комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
              "    pm.response.to.have.status(404);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"eventId\": 1,\n    \"text\": \"Update comment\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/199/user/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "199",
            "user",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменени комментария несуществующим пользователем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
              "    pm.response.to.have.status(404);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"eventId\": 1,\n    \"text\": \"Update comment\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/1/user/199",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "1",
            "user",
            "199"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария от несуществующего пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
              "    pm.response.to.have.status(404);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"eventId\": 1,\n    \"text\": \"Test comment\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/user/99",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "user",
            "99"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария с некорректным телом",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
              "    pm.response.to.have.status(400);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"eventId\": 1,\n    \"text\": \"\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/user/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "user",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария без event_id",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
              "    pm.response.to.have.status(400);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"eventId\": 1,\n    \"text\": \"\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/user/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "user",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария для несуществующего события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
              "    pm.response.to.have.status(404);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"eventId\": 1,\n    \"text\": \"Test comment\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/user/99",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "user",
            "99"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария администратором",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/admin/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "admin",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария автором",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/2/user/1",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "2",
            "user",
            "1"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление не существующего комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {",
              "    pm.response.to.have.status(404);",
              "    pm.response.to.be.withBody;",
              "    pm.response.to.be.json;",
              "});",
              "",
              "const target = pm.response.json();",
              "",
              "pm.test(\"Ошибка должна содержать поля: status\", function () {",
              "    pm.expect(target).to.have.property('status');",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/comments/199",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "comments",
            "199"
          ]
        }
      },
      "response": []
    }
  ]
}